"use strict";function string2array(a){return a.split(",").map(Function.prototype.call,String.prototype.trim)}function pasteHtmlAtCaret(a){var b,c;if(window.getSelection){if(b=window.getSelection(),b.getRangeAt&&b.rangeCount){c=b.getRangeAt(0),c.deleteContents();var d=document.createElement("div");d.innerHTML=a;for(var e,f,g=document.createDocumentFragment();e=d.firstChild;)f=g.appendChild(e);c.insertNode(g),f&&(c=c.cloneRange(),c.setStartAfter(f),c.collapse(!0),b.removeAllRanges(),b.addRange(c))}}else document.selection&&"Control"!=document.selection.type&&document.selection.createRange().pasteHTML(a)}angular.module("ngWig",["ngwig-app-templates"]),angular.ngWig={version:"3.0.1"},angular.module("ngWig").component("ngWigPlugin",{bindings:{plugin:"<",execCommand:"=",editMode:"=",disabled:"=",options:"<",content:"="},controller:["$scope","$element","$compile",function(a,b,c){b.replaceWith(c("<"+this.plugin.pluginName+' plugin="$ctrl.plugin"exec-command="$ctrl.execCommand"edit-mode="$ctrl.editMode"disabled="$ctrl.disabled"options="$ctrl.options"content="$ctrl.content"/>')(a))}]}),describe("component: ngWigPlugin",function(){var a=void 0,b=void 0,c={name:"myPlugin",pluginName:"my-plugin"},d="fakeCmd()",e=!1,f=!1,g=["Option 1","Option 2"],h="Fake text",i=angular.element("<div></div>"),j=void 0;beforeEach(module("ngWig")),beforeEach(inject(function(k,l,m){b=l.$new(),j=m,spyOn(i,"replaceWith"),a=k("ngWigPlugin",{$scope:b,$element:i},{plugin:c,execCommand:d,editMode:e,disabled:f,options:g,content:h})})),it("should expose plugin",function(){expect(a.plugin).toEqual(c)}),it("should expose execCommand",function(){expect(a.execCommand).toEqual(d)}),it("should expose editMode",function(){expect(a.editMode).toEqual(e)}),it("should expose disabled",function(){expect(a.disabled).toEqual(f)}),it("should expose options",function(){expect(a.options).toEqual(g)}),it("should expose content",function(){expect(a.content).toEqual(h)}),it("should replace with the plugin template",function(){var c=j("<"+a.plugin.pluginName+' plugin="$ctrl.plugin"exec-command="$ctrl.execCommand"edit-mode="$ctrl.editMode"disabled="$ctrl.disabled"options="$ctrl.options"content="$ctrl.content"/>')(b);expect(i.replaceWith).toHaveBeenCalledWith(c)})}),angular.module("ngWig").provider("ngWigToolbar",function(){var a={list1:{title:"Unordered List",command:"insertunorderedlist",styleClass:"list-ul"},list2:{title:"Ordered List",command:"insertorderedlist",styleClass:"list-ol"},bold:{title:"Bold",command:"bold",styleClass:"bold"},italic:{title:"Italic",command:"italic",styleClass:"italic"},link:{title:"Link",command:"createlink",styleClass:"link"}},b=["list1","list2","bold","italic","link"],c=function(){return this.command&&document.queryCommandState(this.command)};this.setButtons=function(a){if(!angular.isArray(a))throw'Argument "buttons" should be an array';b=a},this.addStandardButton=function(c,d,e,f){if(!c||!d||!e)throw'Arguments "name", "title" and "command" are required';f=f||"",a[c]={title:d,command:e,styleClass:f},b.push(c)},this.addCustomButton=function(c,d){if(!c||!d)throw'Arguments "name" and "pluginName" are required';a[c]={pluginName:d,isComplex:!0},b.push(c)},this.$get=function(){return{getToolbarButtons:function(d){var e=[];return(d||b).forEach(function(b){if(!a[b])throw'There is no "'+b+'" in your library. Possible variants: '+Object.keys(a);var d=angular.copy(a[b]);angular.isFunction(d.isActive)||(d.isActive=c),e.push(d)}),e}}}}),describe("provider: ngWigToolbar",function(){var a=void 0;beforeEach(function(){module("ngWig",function(b){a=b}),inject()}),describe("setButtons function",function(){it("should exist",function(){expect(a.setButtons).toBeDefined()}),it("should throw an error if buttons are not provided",function(){expect(function(){a.setButtons()}).toThrow('Argument "buttons" should be an array')}),it("should not throw an error if buttons are provided",function(){expect(function(){a.setButtons(["button1","button2"])}).not.toThrow()})}),describe("addStandardButton function",function(){it("should exist",function(){expect(a.addStandardButton).toBeDefined()}),it("should throw an error if name/title/command is not provided",function(){var b='Arguments "name", "title" and "command" are required';expect(function(){return a.addStandardButton()}).toThrow(b),expect(function(){return a.addStandardButton("button1")}).toThrow(b),expect(function(){return a.addStandardButton("button1","My button")}).toThrow(b)}),it("should not throw an error if name, title and command are provided",function(){expect(function(){a.addStandardButton("button1","My button","fakeCmd()")}).not.toThrow()})}),describe("addCustomButton function",function(){it("should exist",function(){expect(a.addCustomButton).toBeDefined()}),it("should throw an error if name/plugin is not provided",function(){var b='Arguments "name" and "pluginName" are required';expect(function(){a.addCustomButton()}).toThrow(b),expect(function(){a.addCustomButton("button1")}).toThrow(b)}),it("should not throw an error if name and pluginName are provided",function(){expect(function(){a.addCustomButton("button1","my-button")}).not.toThrow()})}),describe("$get function",function(){it("should exist",function(){expect(a.$get).toBeDefined()}),describe("getToolbarButtons function",function(){it("should exist",inject(function(){expect(a.$get().getToolbarButtons).toBeDefined()})),it("should throw an error if provided buttons have not been added first",function(){expect(function(){a.$get().getToolbarButtons(["button1"])}).toThrow('There is no "button1" in your library. Possible variants: list1,list2,bold,italic,link,clear-styles,forecolor,formats')}),it("should return 8 buttons by default",function(){expect(a.$get().getToolbarButtons().length).toEqual(8)}),it("should return 1 button",function(){a.addCustomButton("button1","my-button"),expect(a.$get().getToolbarButtons(["button1"]).length).toEqual(1)}),it("should add isActive function to a button",function(){a.addCustomButton("button1","my-button"),expect(a.$get().getToolbarButtons(["button1"])[0].isActive).toBeDefined()})})})}),angular.module("ngWig").component("ngWig",{bindings:{content:"=ngModel",options:"<?",onPaste:"&",buttons:"@",beforeExecCommand:"&",afterExecCommand:"&",placeholder:"<?"},require:{ngModelController:"ngModel"},templateUrl:"ng-wig/views/ng-wig.html",controller:["$scope","$element","$q","$attrs","$window","$document","ngWigToolbar",function(a,b,c,d,e,f,g){var h=this,i=angular.element(b[0].querySelector("#ng-wig-editable"));this.required="required"in d,this.isSourceModeAllowed="sourceModeAllowed"in d,this.editMode=!1,this.toolbarButtons=g.getToolbarButtons(this.buttons&&string2array(this.buttons)),this.placeholder=d.placeholder,d.$observe("disabled",function(a){h.disabled=a,i.attr("contenteditable",!a)}),this.isEditorActive=function(){return i[0]===f[0].activeElement},this.toggleEditMode=function(){h.editMode=!h.editMode,e.getSelection().removeAllRanges&&e.getSelection().removeAllRanges()},this.execCommand=function(b,c){return!h.editMode&&void(("createlink"!==b&&"insertImage"!==b||(c=e.prompt("Please enter the URL","http://")))&&(h.beforeExecCommand({command:b,options:c}),a.$broadcast("execCommand",{command:b,options:c}),h.afterExecCommand({command:b,options:c})))},this.$onInit=function(){var b=Boolean(h.placeholder);h.ngModelController.$render=function(){return b?i.empty():i.html(h.ngModelController.$viewValue||"<p></p>")},i.bind("blur keyup change focus click",function(){(b&&!i.html().length||b&&"<br>"===i.html())&&i.empty(),h.ngModelController.$setViewValue(i.html()),a.$applyAsync()})},i.on("paste",function(a){if(d.onPaste){var b=void 0;b=window.clipboardData&&window.clipboardData.getData?window.clipboardData.getData("Text"):(a.originalEvent||a).clipboardData.getData("text/plain"),a.preventDefault(),c.when(h.onPaste({$event:a,pasteContent:b})).then(function(a){pasteHtmlAtCaret(a)})}}),a.$on("execCommand",function(a,b){var c=f[0].getSelection().toString(),d=b.command,e=b.options;if(a.stopPropagation&&a.stopPropagation(),i[0].focus(),f[0].queryCommandSupported&&!f[0].queryCommandSupported(d))throw'The command "'+d+'" is not supported';"createlink"===d&&""===c?f[0].execCommand("insertHtml",!1,'<a href="'+e+'">'+e+"</a>"):f[0].execCommand(d,!1,e)})}]}),describe("component: ngWig",function(){function a(a){var b=angular.element(a||'<ng-wig ng-model="text1"><ng-wig>'),c=p(b)(e);return e.$digest(),d=b.controller("ngWig"),c}var b=void 0,c=void 0,d=void 0,e=void 0,f="Fake text",g=["Option 1","Option 2"],h="button1,button2",i=angular.element("<div></div>"),j={$observe:function(){},placeholder:""},k=void 0,l=void 0,m=void 0,n={list1:{title:"Unordered List",command:"insertunorderedlist",styleClass:"list-ul"},list2:{title:"Ordered List",command:"insertorderedlist",styleClass:"list-ol"},bold:{title:"Bold",command:"bold",styleClass:"bold"},italic:{title:"Italic",command:"italic",styleClass:"italic"},link:{title:"Link",command:"createlink",styleClass:"link"}},o=void 0,p=void 0;beforeEach(module("ngWig")),beforeEach(inject(function(a,d,q,r,s,t){o=r,p=s,c=a,e=q.$new(),k=jasmine.createSpy("pasteSpy"),l=jasmine.createSpy("beforeExecSpy"),m=jasmine.createSpy("afterExecSpy"),spyOn(t,"getToolbarButtons").and.returnValue(n),spyOn(o.getSelection(),"removeAllRanges"),b=c("ngWig",{$scope:e,$element:i,$attrs:j},{content:f,options:g,buttons:h,onPaste:k,beforeExecCommand:l,afterExecCommand:m})})),it("should expose content",function(){expect(b.content).toEqual(f)}),it("should expose options",function(){expect(b.options).toEqual(g)}),it("should expose buttons",function(){expect(b.buttons).toEqual(h)}),it("should call onPaste",function(){b.onPaste(),expect(k).toHaveBeenCalled()}),it("should call beforeExecCommand",function(){b.beforeExecCommand(),expect(l).toHaveBeenCalled()}),it("should call afterExecCommand",function(){b.afterExecCommand(),expect(m).toHaveBeenCalled()}),it("should set required",function(){expect(b.required).toEqual(!1)}),it("should set isSourceModeAllowed",function(){expect(b.isSourceModeAllowed).toEqual(!1)}),it("should set editMode",function(){expect(b.editMode).toEqual(!1)}),it("should set toolbarButtons",function(){expect(b.toolbarButtons).toBe(n)}),describe("isEditorActive function",function(){it("should exist",function(){expect(b.isEditorActive).not.toBe(null)}),it("should return false",function(){expect(b.isEditorActive()).toEqual(!1)})}),describe("toggleEditMode function",function(){it("should exist",function(){expect(b.toggleEditMode).not.toBe(null)}),it("should toggle the edit mode of the editor",function(){b.toggleEditMode(),expect(b.editMode).toEqual(!0)}),it("should remove all ranges from the selection",function(){b.toggleEditMode(),expect(o.getSelection().removeAllRanges).toHaveBeenCalled()})}),describe("execCommand function",function(){beforeEach(function(){spyOn(e,"$broadcast")}),it("should exist",function(){expect(b.execCommand).not.toBe(null)}),it("should return if the editor is in edit mode",function(){b.editMode=!0,expect(b.execCommand("fakeCmd")).toEqual(!1)}),it("should broadcast the command",function(){b.execCommand("fakeCmd",{}),expect(l).toHaveBeenCalledWith({command:"fakeCmd",options:{}}),expect(e.$broadcast).toHaveBeenCalledWith("execCommand",{command:"fakeCmd",options:{}}),expect(m).toHaveBeenCalledWith({command:"fakeCmd",options:{}})}),it("should show a prompt when the command name is createlink",function(){spyOn(o,"prompt").and.returnValue("http://fakeLink"),b.execCommand("createlink"),expect(o.prompt).toHaveBeenCalledWith("Please enter the URL","http://")}),it("should show a prompt when the command name is insertImage",function(){spyOn(o,"prompt").and.returnValue("http://fakeImage"),b.execCommand("insertImage"),expect(o.prompt).toHaveBeenCalledWith("Please enter the URL","http://")}),it("should not show a prompt when the command is not createlink or insertImage",function(){spyOn(o,"prompt"),b.execCommand("fakeCmd"),expect(o.prompt).not.toHaveBeenCalled()}),it("should return if the prompt is cancelled",function(){spyOn(o,"prompt").and.returnValue(void 0),b.execCommand("createlink"),expect(l).not.toHaveBeenCalled(),expect(e.$broadcast).not.toHaveBeenCalled(),expect(m).not.toHaveBeenCalled()})}),it("should fail if ngModel is not provided",function(){expect(function(){a("<ng-wig><ng-wig>")}).toThrow()}),it("should set disabled property",function(){i=a('<ng-wig disabled="true" ng-model="text1"></ng-wig>'),ngWigElement=angular.element(i[0].querySelector("#ng-wig-editable")),expect(d.disabled).toEqual("true"),expect(ngWigElement.attr("contenteditable")).toEqual("false")}),describe("$onInit function",function(){var c=void 0;it("should exist",function(){expect(b.$onInit).not.toBe(null)}),describe("$render function",function(){beforeEach(function(){i=a(),c=angular.element(i[0].querySelector("#ng-wig-editable")),spyOn(d.ngModelController,"$setViewValue")}),it("should render a paragraph element if ngModel value does not exist",function(){expect(c.html()).toEqual("<p></p>")}),it("should update the model value on blur event",function(){c.triggerHandler("blur"),expect(d.ngModelController.$setViewValue).toHaveBeenCalledWith("<p></p>")}),it("should update the model value on keyup event",function(){c.triggerHandler("keyup"),expect(d.ngModelController.$setViewValue).toHaveBeenCalledWith("<p></p>")}),it("should update the model value on change event",function(){c.triggerHandler("change"),expect(d.ngModelController.$setViewValue).toHaveBeenCalledWith("<p></p>")}),it("should update the model value on focus event",function(){c.triggerHandler("focus"),expect(d.ngModelController.$setViewValue).toHaveBeenCalledWith("<p></p>")}),it("should update the model value on click event",function(){c.triggerHandler("click"),expect(d.ngModelController.$setViewValue).toHaveBeenCalledWith("<p></p>")})})})}),angular.module("ngWig").config(["ngWigToolbarProvider",function(a){a.addCustomButton("formats","nw-formats-button")}]).component("nwFormatsButton",{bindings:{execCommand:"=",editMode:"=",disabled:"="},template:'<select class="nw-select" \n                           ng-model="$ctrl.format" \n                           ng-change="$ctrl.execCommand(\'formatblock\', $ctrl.format.value)" \n                           ng-options="format.name for format in $ctrl.formats" \n                           ng-disabled="$ctrl.editMode || $ctrl.disabled"></select>',controller:function(){this.formats=[{name:"Normal text",value:"<p>"},{name:"Header 1",value:"<h1>"},{name:"Header 2",value:"<h2>"},{name:"Header 3",value:"<h3>"}],this.format=this.formats[0]}}),angular.module("ngwig-app-templates",["ng-wig/views/ng-wig.html"]),angular.module("ng-wig/views/ng-wig.html",[]).run(["$templateCache",function(a){a.put("ng-wig/views/ng-wig.html",'<div class="ng-wig">\n  <ul class="nw-toolbar">\n    <li class="nw-toolbar__item" ng-repeat="button in $ctrl.toolbarButtons">\n        <div ng-if="!button.isComplex">\n          <button type="button"\n                  class="nw-button {{button.styleClass}}"\n                  title="{{button.title}}"\n                  ng-click="$ctrl.execCommand(button.command)"\n                  ng-class="{ \'nw-button--active\': !$ctrl.disabled && $ctrl.isEditorActive() && button.isActive() }"\n                  ng-disabled="$ctrl.editMode || $ctrl.disabled">\n            {{ button.title }}\n          </button>\n        </div>\n        <div ng-if="button.isComplex">\n          <ng-wig-plugin\n              exec-command="$ctrl.execCommand"\n              plugin="button"\n              edit-mode="$ctrl.editMode"\n              disabled="$ctrl.disabled"\n              options="$ctrl.options"\n              content="$ctrl.content"></ng-wig-plugin>\n        </div>\n    </li><!--\n    --><li class="nw-toolbar__item">\n      <button type="button"\n              class="nw-button nw-button--source"\n              title="Edit HTML"\n              ng-class="{ \'nw-button--active\': $ctrl.editMode }"\n              ng-if="$ctrl.isSourceModeAllowed"\n              ng-click="$ctrl.toggleEditMode()"\n              ng-disabled="$ctrl.disabled">\n        Edit HTML\n      </button>\n    </li>\n  </ul>\n\n  <div class="nw-editor-container">\n    <div class="nw-editor__src-container" ng-show="$ctrl.editMode">\n      <textarea ng-model="$ctrl.content"\n                ng-disabled="$ctrl.disabled"\n                class="nw-editor__src"></textarea>\n    </div>\n    <div class="nw-editor" ng-class="{ \'nw-disabled\': $ctrl.disabled }">\n      <div id="ng-wig-editable"\n           tabindex="-1"\n           class="nw-editor__res"\n           ng-class="{\'nw-invisible\': $ctrl.editMode}"\n           ng-disabled="$ctrl.disabled"\n           contenteditable\n           placeholder="{{$ctrl.placeholder}}">\n      </div>\n    </div>\n  </div>\n</div>\n')}]);